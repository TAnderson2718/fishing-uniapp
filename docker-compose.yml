version: '3.8'

services:
  # 前端应用
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: fishing-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    environment:
      - NODE_ENV=production
    networks:
      - fishing-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 后端API服务
  backend:
    image: fishing-backend:latest
    container_name: fishing-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_URL=${REDIS_URL}
    volumes:
      - backend-uploads:/app/uploads
      - backend-logs:/app/logs
    networks:
      - fishing-network
    depends_on:
      - database
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 数据库
  database:
    image: postgres:15-alpine
    container_name: fishing-database
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-fishing}
      - POSTGRES_USER=${POSTGRES_USER:-fishing}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - fishing-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-fishing}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: fishing-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - fishing-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 监控服务
  monitoring:
    image: prom/prometheus:latest
    container_name: fishing-monitoring
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - fishing-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # 日志收集
  logging:
    image: grafana/loki:latest
    container_name: fishing-logging
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - loki-data:/loki
      - ./docker/loki.yml:/etc/loki/local-config.yaml:ro
    networks:
      - fishing-network
    command: -config.file=/etc/loki/local-config.yaml

  # 备份服务
  backup:
    image: postgres:15-alpine
    container_name: fishing-backup
    restart: "no"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-fishing}
      - POSTGRES_USER=${POSTGRES_USER:-fishing}
      - PGPASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data:ro
      - backup-data:/backup
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - fishing-network
    depends_on:
      - database
    entrypoint: ["/backup.sh"]

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  nginx-logs:
    driver: local
  backend-uploads:
    driver: local
  backend-logs:
    driver: local
  prometheus-data:
    driver: local
  loki-data:
    driver: local
  backup-data:
    driver: local

networks:
  fishing-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
